package com.product.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.product.exception.BusinessException;
import com.product.exception.EmptyInputException;
import com.product.exception.ProductNotFoundException;
import com.product.model.Product;
import com.product.repository.ProductRepository;

public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepository productRepository;

	@Override
	public List<Product> getAllProducts() {
		// TODO Auto-generated method stub

		List<Product> product = productRepository.findAll();
		if (product.isEmpty()) {
			throw new EmptyInputException("222", "no product  found!");
		} else {
			return product;

		}

	}

	/*
	 * @Override public List<Product> getProductByName(String productName) { // TODO
	 * Auto-generated method stub
	 * System.out.println("getting data from db"+productName); return
	 * productRepository.findByProductName(productName); }
	 * 
	 * @Override public List<Product> getProductByCategory(String category) { //
	 * TODO Auto-generated method stub return
	 * productRepository.findByCategory(category); }
	 * 
	 * 
	 * @Override public List<Product> getProductByType(String productType) { // TODO
	 * Auto-generated method stub return
	 * productRepository.findByProductType(productType); }
	 */

	@Override
	public Product addProduct(Product product) {
		if(product.getProductName().isBlank() || product.getProductName().length()==0) {
			throw new EmptyInputException("786","value can not be null");
		}
		else
		{
			return productRepository.save(product);
	}
	}

	@Override
	public String updateProduct(Product product,int productId) {
		boolean isProductExist= productRepository.existsById(productId);
		if(isProductExist) {
		    productRepository.save(product);
		    return "Product updated"+productId;
		}
		else {
			throw new ProductNotFoundException("234" ,"Product Not Found");
		}
	}

	@Override
	public String deleteByProductName(Product product,int productId) {
		boolean isProductExist= productRepository.existsById(productId);
		if(isProductExist) {
		    productRepository.deleteById(productId);
		    return "Product deleted"+productId;
		}
		else {
			throw new ProductNotFoundException("647" ,"Product Not Found");
		}
	}
	}

}
